def branch = env.BRANCH_NAME ?: "DEV"
def namespace = env.NAMESPACE  ?: "dev"
def cloudName = env.CLOUD_NAME == "openshift" ? "openshift" : "kubernetes"
def workingDir = "/home/jenkins/agent"

APP_NAME="combined-devops-cognos-deployments"

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  volumes:
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
    - emptyDir: {}
      name: varlibcontainers
    - name: jenkins-trusted-ca-bundle
      configMap:
        name: jenkins-trusted-ca-bundle
        defaultMode: 420
        optional: true
  containers:
    - name: jnlp
      securityContext:
        privileged: true
      envFrom:
        - configMapRef:
            name: jenkins-agent-env
            optional: true
      env:
        - name: GIT_SSL_CAINFO
          value: "/etc/pki/tls/certs/ca-bundle.crt"
      volumeMounts:
        - name: jenkins-trusted-ca-bundle
          mountPath: /etc/pki/tls/certs
    - name: node
      image: registry.access.redhat.com/ubi8/nodejs-16:latest
      tty: true
      command: ["/bin/bash"]
      securityContext:
        privileged: true
      workingDir: ${workingDir}
      envFrom:
        - configMapRef:
            name: jenkins-agent-env
            optional: true
      env:
        - name: HOME
          value: ${workingDir}
        - name: BRANCH
          value: ${branch}
        - name: GIT_SSL_CAINFO
          value: "/etc/pki/tls/certs/ca-bundle.crt"
      volumeMounts:
        - name: jenkins-trusted-ca-bundle
          mountPath: /etc/pki/tls/certs
    - name: python
      image: 136299550619.dkr.ecr.us-west-2.amazonaws.com/cammisboto3:1.2.0
      tty: true
      command: ["/bin/bash"]
      securityContext:
        privileged: true
      workingDir: ${workingDir}
      envFrom:
        - configMapRef:
            name: jenkins-agent-env
            optional: true
      env:
        - name: HOME
          value: ${workingDir}
        - name: BRANCH
          value: ${branch}
        - name: GIT_SSL_CAINFO
          value: "/etc/pki/tls/certs/ca-bundle.crt"
        # Make requests trust the mounted CA bundle (no -k)
        - name: REQUESTS_CA_BUNDLE
          value: "/etc/pki/tls/certs/ca-bundle.crt"
        - name: SSL_CERT_FILE
          value: "/etc/pki/tls/certs/ca-bundle.crt"
        # Non-interactive mode signal for the CLI
        - name: CI
          value: "1"
      volumeMounts:
        - name: jenkins-trusted-ca-bundle
          mountPath: /etc/pki/tls/certs
"""
    }
  }

  environment {
    GIT_BRANCH = "${BRANCH_NAME}"
    MOTIO_SERVER = "https://cgrptmcip01.cloud.cammis.ca.gov"

    // Source/Target config
    SRC_INSTANCE_NAME = "Cognos-DEV/TEST"
    SRC_INSTANCE_ID   = "3"
    TGT_INSTANCE_NAME = "Cognos-PRD"
    TGT_INSTANCE_ID   = "1"
    PROJECT_NAME      = "Demo"
    SOURCE_LABEL_ID   = "57"
    TARGET_LABEL_NAME = "PROMOTED-20250712-115"

    
    NAMESPACE_ID      = "AzureAD"
  }

  options {
    disableConcurrentBuilds()
    timestamps()
  }

  stages {
    stage("initialize") {
      steps {
        script {
          echo "Branch: ${env.GIT_BRANCH}"
          echo "Initializing Motio pipeline..."
        }
      }
    }

    stage('Check Python Availability') {
      steps {
        container('node') {
          sh '''
            set -e
            echo "Checking for Python3..."
            which python3 || true
            python3 --version || true
          '''
        }
      }
    }

    stage('Install CLI deps') {
      steps {
        container('python') {
          sh '''
            set -e
            cd MotioCI/api/CLI
            python3 -m pip install --user -r requirements.txt
            echo "Dependencies installed."
          '''
        }
      }
    }

stage('MotioCI Login') {
      steps {
        withCredentials([
          // def credentialsId
          //   if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master') {
          //       credentialsId = 'motio-credentials-json'
          //   } else {
          //       credentialsId = 'prod-credentials-json' // default to dev
          //   }
          file(credentialsId: 'cognos-credentials-json', variable: 'CREDENTIALS_FILE')
        ]) {
          container('python') {
            script {
              echo "Installing MotioCI CLI dependencies"
              sh '''
                cd MotioCI/api/CLI
                python3 -m pip install --user -r requirements.txt
                echo "Successfully installed packages"
              '''
              
              echo "Logging into MotioCI with stored credentials file"
              env.MOTIO_AUTH_TOKEN = sh(
                script: '''
                  cd MotioCI/api/CLI
                  # Login and capture only the token line, then extract just the token
                  python3 ci-cli.py --server="https://cgrptmcip01.cloud.cammis.ca.gov" login --credentialsFile "$CREDENTIALS_FILE" | grep "Auth Token:" | cut -d: -f2 | tr -d ' '
                ''',
                returnStdout: true
              ).trim()
              echo "MotioCI login completed - Token captured: ${env.MOTIO_AUTH_TOKEN}"
            }
          }
        }
      }
    }

stage('Debug Namespaces') {
  steps {
    container('python') {
      sh '''
        echo "Checking available namespaces for PRD instance..."
        curl -sk -X POST "https://cgrptmcip01.cloud.cammis.ca.gov/api/graphql" \
          -H "Content-Type: application/json" \
          -H "x-auth-token: ${TOKEN}" \
          -d '{
            "query":"query($id: Long!){ instance(id:$id){ namespaces { id name } } }",
            "variables":{"id":1}
          }' | jq .
      '''
    }
  }
}
